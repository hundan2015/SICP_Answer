#lang sicp
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")")
  (newline))

(define (make-segment p1 p2) (cons p1 p2))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))
(define (midpoint-segment seg) (let ((x1 (x-point (start-segment seg)))
                                     (x2 (x-point (end-segment seg)))
                                     (y1 (y-point (start-segment seg)))
                                     (y2 (y-point (end-segment seg))))
                                 (make-point (/ (+ x1 x2) 2.0) (/ (+ y1 y2) 2.0))))

(define (make-rectangle p1 p2)
  (let ((x1 (x-point p1))
        (x2 (x-point p2))
        (y1 (y-point p1))
        (y2 (y-point p2)))
    (let ((xmin (min x1 x2))
          (ymax (max y1 y2))
          (xmax (max x1 x2))
          (ymin (min y1 y2)))
      (cons (make-point xmin ymax) (make-point xmax ymin)))))
(define (leftup-rectangle rectangle)
  (car rectangle))
(define (rightdown-rectangle rectangle)
  (cdr rectangle))
(define (width-rectangle rectangle)
  (- (x-point (rightdown-rectangle rectangle)) (x-point (leftup-rectangle rectangle))))
(define (height-rectangle rectangle)
  (- (y-point (leftup-rectangle rectangle)) (y-point (rightdown-rectangle rectangle))))
(define (area-rectangle rectangle)
  (* (width-rectangle rectangle) (height-rectangle rectangle)))
(define (perimeter-rectangle rectangle) (* 2 (+ (width-rectangle rectangle) (height-rectangle rectangle))))

(define p1 (make-point 1 2))
(define p2 (make-point 3 4))
(define rectangle (make-rectangle p1 p2))
(print-point (leftup-rectangle rectangle))
(width-rectangle rectangle)
(area-rectangle rectangle)
